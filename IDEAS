build virtualenv in as command
xmlrpc api + examples

retrieve package name from setup.py for Python packages

clean up client stuff!

tagset documentation

one super-client that can detect setup.py, run tests/communicate results, etc.

datastore stuff/archival:
 - get all tagsets
 - get all updates by tagset
 - 'flush tagset'?

everything else can be "within last month"

organize reports with FAILURES at top (unless marked otherwise)

organize git clone/copy etc, hg clone/copy, svn clone/copy.

concatenated output, etc? for GitClone?

a conf.d?

some sort of history ("8 of last 8 succeeded") + flush history
  - keep (configurable) 1 month on display?

client logfile that's communicated back to server @ end.

file upload/download?

integrate TAP?

explain tagsets

anti-DoS: set a default limit on upload size; and/or require package/password.

authentication ^^^ for results submission

separate? authentication for thru-Web configuration

sqlite-based db?

persistent conn?

FIX client_ip nonsense

is_building, request_build => persist

crashing client still needs to report, esp with is_building

nose plugin to report?  + setup.py test and nose config => users.

test client code!

periodic breakage => tests get rerun ever hour until it works:
  masks stochastic errors...

move check code into client.

hierarchical tree of reports, instead of list-of-lists?  (think git stuff)

rename svnclone to svncheckout; have git clone and svncheckout create the
cachedirectory if possible.

client scripts should be much friendlier about one-script-for-multiple-machines.

a directory of public pony-build master servers URLs built-in...? or
retrievable via XML-RPC from my server? or available via a file?  with
short names?

a (hierarchical?) list of projects w/config info, e.g.

   python/cpython2-trunk - svn, co from here, run these commands

so that you can refer via a nice name and not have to configure stuff
yourself?

subprocess incremental reporting.

test swarm!!  (jacob)
   http://ejohn.org/blog/test-swarm-alpha-open/

"top builders" view.

http://www.simile-widgets.org/timeline/  (grig)

pygame inspired stuff (ilume):
 - send test results back to server from install runs
 - include tests in installed package, of course

---

url download/install
pypi/setup.py integration
django

 + need hg
 + virtualenv integration
 + coverage info
 + unittest (junitxml?)